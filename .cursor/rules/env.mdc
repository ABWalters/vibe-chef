---
description: Always use for .env changes or reading/updating the ENV
globs: 
alwaysApply: false
---
# Environment Setup

This document describes how environment variables are managed and validated in this project.

## Environment Files

We use multiple environment files for different purposes:

- `.env`: Contains default, non-sensitive values that can be committed to version control
- `.env.local`: Contains sensitive values and is ignored by git (add to `.gitignore`)
- `.env.production`: Contains non-sensitive production values (when needed)

## Environment Validation

Use [Zod](https://zod.dev/) for runtime environment variable validation. The validation is set up in `src/config/env.ts`:

```typescript
import { z } from "zod";

const envSchema = z.object({
  VITE_SUPABASE_URL: z.string().url("Invalid Supabase URL"),
  VITE_SUPABASE_ANON_KEY: z.string().min(1, "Supabase anon key is required"),
});
```

This ensures that:

1. All required environment variables are present
2. Values match their expected format (e.g., valid URLs)
3. Type safety is maintained throughout the application

## Usage

1. Define your environment variables in the appropriate file:

   - Non-sensitive defaults in `.env`
   - Sensitive values in `.env.local`
   - Production values in `.env.production` (if needed)

2. Add the variable to the `envSchema` in `src/config/env.ts`

3. Import and use the validated environment variables:

   ```typescript
   import { env } from "@/config/env";

   // Variables are now type-safe and validated
   const supabaseUrl = env.VITE_SUPABASE_URL;
   ```

## Security

- Never commit sensitive values to version control
- Always add `.env.local` to `.gitignore`
- Use appropriate naming conventions (e.g., `VITE_` prefix for Vite projects)
- Validate all environment variables at runtime

## Dependencies

The environment setup relies on the following packages:

- `zod`: For runtime environment validation
- `vite`: For development server and build process
